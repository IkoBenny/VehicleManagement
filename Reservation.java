import java.util.Calendar;
import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;

public abstract class Reservation {

	protected Integer accountID = -1;	//has a negative one value; updated when added to a specific account

	protected String reservationNumber;	//generated by UI (10 characters)

	protected Address physicalAddress;

	protected Address mailingAddress;	//optional

	protected Calendar reservationStart;

	protected Integer noOfNights;

	protected Integer noOfBedrooms = 1;	//number of bedroom, default 1

	protected Integer reservationSize;	//in square feet

	protected String reservationStatus = "draft";	// (draft, completed, or cancelled) always starts in draft status

	protected Integer noOfBeds;

	//constructor for when mailing address is explicitly given
	public Reservation(String reservationNo, Address physical, Address mailing, Calendar startDate, Integer nights, Integer beds, Integer size, Integer bedrooms) {
		try {
			//validate values
			if(reservationNo.equals(null) || reservationNo.length() == 0 || physical.equals(null) || startDate.equals(null) || nights.equals(null) || beds.equals(null) || size.equals(null) || bedrooms.equals(null))
				throw new IllegalArgumentException("Parameter values cannot be null or empty strings");		
			//initalize values
			reservationNumber = reservationNo;
			physicalAddress = physical;
			reservationStart = startDate;
			noOfNights = nights;
			noOfBedrooms = bedrooms;
			reservationSize = size;
			noOfBeds = beds;
			//Reservation:mailingAddress can be null and code must handle that
			if (mailing.equals(null)) {
				mailingAddress = physical;
			}
			else
				mailingAddress = mailing;

		}		
		//catch NPE, throw IllegalArgument instead
		catch(NullPointerException npe) {
			throw new IllegalArgumentException("Parameter values cannot be null or empty strings");
		}
	}

	//constructor for when mailing address is not explicitly given
	public Reservation(String reservationNo, Address physical, Integer nights, Integer bedrooms, Integer size, Calendar startDate, Integer beds) {
		//validate values
		if(reservationNo == null || reservationNo.length() ==0 || physical == null || startDate == null || nights == null || beds == null || size == null || bedrooms == null)
			throw new IllegalArgumentException("Parameter values cannot be null or empty strings");
		//initalize values
		reservationNumber = reservationNo;
		//Reservation:mailingAddress can be null and code must handle that
		mailingAddress = physical;
		physicalAddress = physical;
		reservationStart = startDate;
		noOfNights = nights;
		noOfBedrooms = bedrooms;
		reservationSize = size;
		noOfBeds = beds;
	}

	//constructor for loading object from file
	public Reservation(String fileName){		
		//load String from file - filename
		String line;
		Scanner sc;
		try {
			sc = new Scanner(new File(fileName));
			line = sc.nextLine();	
			sc.close();
		} catch (FileNotFoundException e) {
			//if file name doesnt exist/object cannot be loaded throw IllegalLoadException and fail
			throw new IllegalLoadException(fileName, accountID , "Reservation");
		}
		
		catch (Exception e) {
			//if file name doesnt exist/object cannot be loaded throw IllegalLoadException and fail
			throw new IllegalLoadException(fileName, accountID , "Reservation");
		}		
		//otherwise create the object
		//parse String
		//get accountID value
		int accountIDOpenTagPos = line.indexOf("<accountid>");
		int accountIDCloseTagPos = line.indexOf("</accountid>");
		accountID = Integer.parseInt(line.substring(accountIDOpenTagPos + 11, accountIDCloseTagPos));		
		//get reservationNumber value
		int reservationNumberOpenTagPos = line.indexOf("<reservationnumber>");
		int reservationNumberCloseTagPos = line.indexOf("</reservationnumber>");
		reservationNumber = line.substring(reservationNumberOpenTagPos + 19, reservationNumberCloseTagPos); 
		//get physicalAddress value
		int physicalAddressOpenTagPos = line.indexOf("<physicaladdress>");
		int physicalAddressCloseTagPos = line.indexOf("</physicaladdress>");
		String pa = line.substring(physicalAddressOpenTagPos + 17, physicalAddressCloseTagPos);
		physicalAddress = new Address(pa);
		//get mailingAddress value
		int mailingAddressOpenTagPos = line.indexOf("<mailingaddress>");
		int mailingAddressCloseTagPos = line.indexOf("</mailingaddress>");
		String ma = line.substring(mailingAddressOpenTagPos + 16, mailingAddressCloseTagPos); 
		//when mailing address is null cannot call Address constructor because it will fail
		if(ma.length() == 0 || ma == null)
			mailingAddress = physicalAddress;
		else
		mailingAddress = new Address(ma);
		//get reservationStart value
		int reservationStartOpenTagPos = line.indexOf("<reservationstart>");
		int reservationStartCloseTagPos = line.indexOf("</reservationstart>");
		String rs = line.substring(reservationStartOpenTagPos + 18, reservationStartCloseTagPos);
		//get month
		int monthSlash = rs.indexOf("/");		
		int month = Integer.parseInt(rs.substring(0, monthSlash));
		rs = rs.substring(monthSlash + 1);
		//get day
		int daySlash = rs.indexOf("/");
		int day = Integer.parseInt(rs.substring(0, daySlash));
		rs = rs.substring(daySlash + 1);
		//get year	
		int year = Integer.parseInt(rs); // Integer.parseInt(rs.substring(daySlash));
		//assign reservationStart values
		Calendar temp = Calendar.getInstance();
		temp.set(year, month, day);
		reservationStart = temp;
		//get noOfNights value
		int noOfNightsOpenTagPos = line.indexOf("<noofnights>");
		int noOfNightsCloseTagPos = line.indexOf("</noofnights>");
		noOfNights = Integer.parseInt(line.substring(noOfNightsOpenTagPos + 12, noOfNightsCloseTagPos)); 
		//get noOfBedrooms value
		int noOfBedroomsOpenTagPos = line.indexOf("<noofbedrooms>");
		int noOfBedroomsCloseTagPos = line.indexOf("</noofbedrooms>");
		noOfBedrooms = Integer.parseInt(line.substring(noOfBedroomsOpenTagPos + 14, noOfBedroomsCloseTagPos)); 
		//get reservationSize value
		int reservationSizeOpenTagPos = line.indexOf("<reservationsize>");
		int reservationSizeCloseTagPos = line.indexOf("</reservationsize>");
		reservationSize = Integer.parseInt(line.substring(reservationSizeOpenTagPos + 17, reservationSizeCloseTagPos)); 
		//get reservationStatus value
		int reservationStatusOpenTagPos = line.indexOf("<reservationstatus>");
		int reservationStatusCloseTagPos = line.indexOf("</reservationstatus>");
		reservationStatus = line.substring(reservationStatusOpenTagPos + 19, reservationStatusCloseTagPos); 
		//get noOfBeds value
		int noOfBedsOpenTagPos = line.indexOf("<noofbeds>");
		int noOfBedsCloseTagPos = line.indexOf("</noofbeds>");
		noOfBeds = Integer.parseInt(line.substring(noOfBedsOpenTagPos + 10, noOfBedsCloseTagPos)); 
		
	}          	  

	public Float calculatePricePerNight() {
		//$100 + $20 if greater than 800 square feet; price assumes a single bedroom/bathroom
		Float base = 100.00f;
		if(reservationSize > 800f)
			base = Float.sum(base, 20.00f) ;
		return base;
	}

	//saves info on this Reservation to file
	public void saveToFile(String directoryName) {
		PrintWriter writer = null;
		try
        {			
            // create/override a file given the fileName
			if(this.getClass().getSimpleName().equals("HouseReservation")) {
				writer = new PrintWriter(directoryName + "O" + reservationNumber + ".txt");
				// write out the Reservation level information using the XML format
				writer.println(toString());
				writer.close();
			}
				
			else if(this.getClass().getSimpleName().equals("ApartmentReservation")) {
				writer = new PrintWriter(directoryName + "A" + reservationNumber + ".txt");
				// write out the Reservation level information using the XML format
				writer.println(toString());
				writer.close();
			}
			else {
				writer = new PrintWriter(directoryName + "H" + reservationNumber + ".txt");
				writer.println(toString());
				writer.close();
			}
        }
		
        catch (Exception e)
        {
            System.out.println("Error " + e.getMessage());            
        }
	}

	public Float calculateTotalPrice() {
		return calculatePricePerNight() * noOfNights;
	}

	public void cancelReservation() throws IllegalOperationException {
		//validate that this Reservation may be cancelled
		if(reservationStatus.equals("draft") == false) {
			//if not draft, throw IllegalOperationException
			throw new IllegalOperationException(accountID, reservationNumber, "Reservation");
		}
		//if able, cancel reservation
		reservationStatus = "cancelled";		
	}

	public void completeReservation() {
		//validate that this Reservation may be completed
		if(reservationStatus.equals("draft")){
			//if able, complete reservation
			reservationStatus = "completed";
		}
		else
			//otherwise throw IllegalOperationException
			throw new IllegalOperationException(accountID, reservationNumber, "Reservation");		
	}

	//get this Reservation's XML formatted data; return as String 
	public String toString() {
		//format this Reservation's info in XML style
		String line =  "<accountid>" + accountID + "</accountid>"+ "<reservationnumber>" + reservationNumber + "</reservationnumber>" +
		"<physicaladdress>" + physicalAddress.toString() + "</physicaladdress>" + "<mailingaddress>" + mailingAddress.toString() + "</mailingaddress>" +
		"<reservationstart>" + (reservationStart.get(Calendar.MONTH) + 1) + "/" + reservationStart.get(Calendar.DATE) + "/" + reservationStart.get(Calendar.YEAR) + "</reservationstart>" +
		"<noofnights>" + noOfNights + "</noofnights>" + "<noofbedrooms>" + noOfBedrooms + "</noofbedrooms>" + "<reservationsize>" + reservationSize + "</reservationsize>" +
		"<reservationstatus>" + reservationStatus + "</reservationstatus>" + "<noofbeds>" + noOfBeds + "</noofbeds>";
		//return this as String 
		return line;
	}

	public void updateReservation(Reservation reservation) {
		//validate draft status
		if(reservationStatus.equals("draft")) {
			// if draft, set values
			this.accountID = reservation.accountID;
			this.reservationNumber = reservation.reservationNumber;
			this.physicalAddress = reservation.physicalAddress;
			this.mailingAddress = reservation.mailingAddress;
			this.reservationStart = reservation.reservationStart;
			this.noOfNights = reservation.noOfNights;
			this.noOfBedrooms = reservation.noOfBedrooms;
			this.reservationSize = reservation.reservationSize;
			this.reservationStatus = reservation.reservationStatus;
			this.noOfBeds = reservation.noOfBeds;
		}
		//otherwise it cannot be changed	
	}

	//return this reeservation number
	public String getReservationnumber() {		  
		return reservationNumber;
	}

	//return this physical address
	public Address getPhysicaladdress() {		 
		return physicalAddress;
	}

	//return this mailing address
	public Address getMailingaddress() {
		return mailingAddress;
	}

	//set the physical ddress for this reservation
	public void setPhysicaladdress(Address physical) {
		//validate draft status, Address
		if(reservationStatus.equals("draft")) {
			// if draft, set values
			physicalAddress = physical;
		}
		else
		//otherwise it fails with IllegalStateException being thrown
			throw new IllegalOperationException(accountID, reservationNumber, "Reservation");
	}

	//set the mailing address for this reservation
	public void setMailingadress(Address mailing) {
		//validate draft status,Address
		if(reservationStatus.equals("draft")) {
		// if draft, set value
			mailingAddress = mailing;
		}
		else
		//otherwise it fails with IllegalStateException being thrown
			throw new IllegalOperationException(accountID, reservationNumber, "Reservation");	
	}

	//return this reservation start date
	public Calendar getStartDate() {
		return reservationStart;		  
	}

	//return the number of nights for this reservation
	public Integer getNumberofnights() {
		return noOfNights;
	}

	//return the number of bedrooms for this reservation
	public Integer getNumberofbedrooms() {
		return noOfBedrooms;
	}

	//return the size of this reservation in sq ft
	public Integer getReservationsize() {
		return reservationSize;		  	  
	}

	//return the status of this reservation 
	public String getReservationStatus() {
		return reservationStatus;
	}

	//return the number of beds for this reservation
	public Integer getNumberofbeds() {
		return noOfBeds;
	}

	//return the ID of this account
	public Integer getAccountID() {
		return accountID;
	}

	//Set methods must validate that the reservation is in draft otherwise it cannot be changed
	
	//sets the account ID for the reservation
	public void setAccountID(Integer id) {
		//validate draft status,id
		if(id == null)
			throw new IllegalArgumentException("Account ID may not be null");
		// if draft, set value
		if(reservationStatus.equals("draft"))
			accountID = id;
		//otherwise it fails with IllegalStateException being thrown
		else
			throw new IllegalStateException("Reservation is not in draft status; state cannot be changed.");
	}

	//Sets the start date for this reservation
	public void setReservationStart(Calendar start) {
		//validate draft status, Calendar
		if(start == null)
			throw new IllegalArgumentException("reservation start date may not be null");
		// if draft, set value
		if(reservationStatus.equals("draft"))
			reservationStart = start;
		//otherwise it fails with IllegalStateException being thrown
		else
			throw new IllegalStateException("Reservation is not in draft status; state cannot be changed.");
	}

	//sets the number of nights for this reservation
	public void setNoOfNights(Integer nights) {
		//validate draft status, nights
		if(nights == null)
			throw new IllegalArgumentException("number of nights may not be null");
		// if draft, set value
		if(reservationStatus.equals("draft"))
			noOfNights = nights;
		//otherwise it fails with IllegalStateException being thrown
		else
			throw new IllegalStateException("Reservation is not in draft status; state cannot be changed.");
	}

	//sets the number of bedrooms for this reservation
	public void setNoOfBedrooms(Integer bedrooms) {
		//validate draft status, bedrooms
		if(bedrooms == null)
			throw new IllegalArgumentException("number of bedrooms may not be null");
		// if draft, set value
		if(reservationStatus.equals("draft"))
			noOfBedrooms = bedrooms;
		//otherwise it fails with IllegalStateException being thrown
		else
			throw new IllegalStateException("Reservation is not in draft status; state cannot be changed.");
	}

	//sets the size of the reservation in square feet
	public void setReservationSize(Integer size) {
		//validate draft status, size
		if(size == null)
			throw new IllegalArgumentException("size of reservation [sq ft] may not be null");
		// if draft, set value
		if(reservationStatus.equals("draft"))
			reservationSize = size;
		//otherwise it fails with IllegalStateException being thrown
		else
			throw new IllegalStateException("Reservation is not in draft status; state cannot be changed.");
	}

	//sets the number of beds for this reservation
	public void setNoOfBeds(Integer beds) {
		//validate draft status, beds
		if(beds == null)
			throw new IllegalArgumentException("Number of beds may not be null");
		// if draft, set value
		if(reservationStatus.equals("draft"))
			noOfBeds = beds;
		//otherwise it fails with IllegalStateException being thrown
		else
			throw new IllegalStateException("Reservation is not in draft status; state cannot be changed.");			
	}


}

