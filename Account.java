import java.io.File;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.Vector;

public class Account {

	private Integer accountID;

	private Vector <Reservation> reservations;	//an account has/manages reservations; reservations this account manages

	private String emailAddress;

	private Address mailingAddress;

	/*An account includes the following information: unique id number generated by UI 
   (9 digits), mailing address associated with the account, list of lodging reservations, and an 
	email associated with the account.*/

	public Account(Integer accountID, Address mailing, String email) {
		//validate values
		if(accountID.equals(null) || mailing.equals(null) || email.equals(null) || email.length() ==0)
			throw new IllegalArgumentException("Parameter values cannot be null or empty strings");
		String id = accountID.toString();
		//enforce account id is 9 digits
		if(id.length() != 9)
			throw new IllegalArgumentException("Account ID must be 9 digits!");
		//initalize values
		this.accountID = accountID;
		mailingAddress = mailing;
		emailAddress = email;
		reservations = new Vector<Reservation>();			
	}

	public Account (String directoryName) {
		try {
			//get reservations list object
			reservations = new Vector<Reservation>();
			//variables for loading a file or directory
			File reservation;
			File dir = new File(directoryName);
			String [] reservationFileNames = null;
			String reservationFileName;
			Character reservationPrefix;
			//get all files/directories in directory
			File[] reservationsAndFile = dir.listFiles();
			//get all reservations aka directories
			for(int i =0; i < reservationsAndFile.length; i++) {			
				dir = reservationsAndFile[i];
				if(dir.isDirectory()) {
					reservation = dir;
					reservationFileNames = reservation.list();
					//get every reservation file
					for(int j = 0; j < reservationFileNames.length; j++) {
						//get name for every reservation file
						reservationFileName = reservationFileNames[j];
						//reservation file name starts with H, A, O
						reservationPrefix = reservationFileName.charAt(0);
						if(reservationPrefix.equals('H')) {
							//add new Hotel reservation to manage
							reservations.add((Reservation) new HotelReservation(reservationFileName));
						}

						else if(reservationPrefix.equals('A')) {
							//add new Apartment reservation to manage
							reservations.add((Reservation) new ApartmentReservation(reservationFileName));
						}

						else {
							//add new House reservation to manage
							reservations.add((Reservation) new HouseReservation(reservationFileName));
						}				
					}
				}
			}


			//get account information
			String line;	
				Scanner sc = new Scanner(new File(directoryName));
				line = sc.nextLine();		
				sc.close();

			//create the object
			//parse String
			//get accountID value
			int accountIDOpenTagPos = line.indexOf("<accountid>");
			int accountIDCloseTagPos = line.indexOf("</accountid>");
			accountID = Integer.parseInt(line.substring(accountIDOpenTagPos + 11, accountIDCloseTagPos));
			//get emailAddress object
			int emailAddressOpenTagPos = line.indexOf("<emailaddress>");
			int emailAddressCloseTagPos = line.indexOf("</emailaddress>");
			emailAddress = line.substring(emailAddressOpenTagPos + 14, emailAddressCloseTagPos);
			//get mailingAddress object
			int mailingAddressOpenTagPos = line.indexOf("<mailingaddress>");
			int mailingAddressCloseTagPos = line.indexOf("</mailingaddress>");
			mailingAddress = new Address(line.substring(mailingAddressOpenTagPos + 16, mailingAddressCloseTagPos));
			}
		catch(Exception e) {
			throw new IllegalLoadException(directoryName, accountID , "Account");
		}

	}

	//get XML formatted Account data; return as String
	public String toString() {
		//format this Account's data
		String line = "<account>" + "<accountid>" + accountID + "</accountid>" + "<emailaddress>" + emailAddress +
				"</emailaddress>" + "<mailingaddress>" + mailingAddress.toString() + "</mailingaddress>" + "</account>";

		//return as String
		return line;
	}

	public void saveToFile(String directoryName) {
		PrintWriter out = null;
		try
        {			
            // create/override an Account file given the fileName
            out = new PrintWriter(directoryName + "acc-" + accountID + ".txt");
           
            // write out the Account and Reservation level information using the XML format
            out.println(toString());
            //get every Reservation object
            for(int i =0; i <reservations.size(); i++) {
            	//create/override an Reservation file given the fileName
            	reservations.get(i).saveToFile(directoryName);
            }
           
            // close the file
            out.close();
        }
		
        catch (Exception e)  // caught an error so can close file
        {
            System.out.println("Error " + e.getMessage());
            if (out != null)
                out.close();  // close file           
        }
	}

	public void addReservation(Reservation reservation) {
		//if reservation number already exists, throw DuplicateObjectException
		for(int i =0; i < reservations.size(); i ++) {
			if(reservations.get(i).getReservationnumber().equals(reservation.getReservationnumber()))
				throw new DuplicateObjectException(reservation.getReservationnumber(), accountID, "Account");
		}
		//otherwise, add to account
		//add reservation parameter to list
		reservations.add(reservation);		
	}

	public void completeReservation(String reservationNo) {
		boolean exists = false;
		for(int i =0; i < reservations.size(); i ++) {
			//find reservation
			if(reservations.get(i).getReservationnumber().equals(reservationNo)) {
				//call reservation object's methods
				reservations.get(i).completeReservation();
				exists = true;
			}
			}
		//if reservation number doesnt exist, throw IllegalArgumentException 
		if(exists == false)
			throw new IllegalArgumentException();
	}

	public void cancelReservation(String reservationNo) throws IllegalOperationException {
		boolean exists = false;
		for(int i=0; i < reservations.size(); i++)
			//find reservation
			if(reservations.get(i).getReservationnumber().equals(reservationNo)) {
				//call reservation object's methods
				reservations.get(i).cancelReservation();
				exists = true;
			}				
		//if reservation number doesnt exist, throw IllegalArgumentException
		if(exists == false)
			throw new IllegalArgumentException("The reservation# " + reservationNo + " does not exist.");
	}

	//returns the reservation object with the given reservationNo
	public Reservation getReservation(String reservationNo) {
		Reservation r = null;
		//find the reservation object that matches the parameter’s id
		for(int i=0; i < reservations.size(); i++)
			if(reservations.get(i).getReservationnumber().equals(reservationNo))
				r = reservations.get(i);
		//if reservation number doesnt exist, return null
			else
				return r;
		//otherwise
		//return that object 
		return r;
		
	}

	public void updateReservation(Reservation reservation) {
		//find reservation to update
		boolean exists = false;
		for(int i=0; i < reservations.size(); i++) {
			//call reservation methods in children's methods
			if(reservations.get(i).getReservationnumber().equals(reservation.getReservationnumber())) {
				reservations.get(i).updateReservation(reservation);
				exists = true;
			}	
		}
		//else
		//if reservation number doesnt exist, throw IllegalArgumentException
		if(exists == false)
			throw new IllegalArgumentException("The reservation# " + reservation.getReservationnumber() + " does not exist.");
	}

	public Float calculateReservationPricePerNight(String reservationNo) {
		Float price = null;
		//given reservation No
		//validate No
		boolean exists = false;
		for(int i=0; i < reservations.size(); i++) {
			//if exists,
			//call method of appropiate Reservation
			if(reservations.get(i).getReservationnumber().equals(reservationNo)) {
				price = reservations.get(i).calculatePricePerNight();
				exists = true;
			}	
		}
		//if reservation number doesnt exist, throw IllegalArgumentException and return null
		if(exists == false) {
			throw new IllegalArgumentException("Reservation number " + reservationNo + " does not exist.");
		}
		else
			return price;
	}

	public Float calculateTotalReservationPrice(String reservationNo) {
		Float price = null;
		//given reservation No
		//validate No
		boolean exists = false;
		for(int i=0; i < reservations.size(); i++) {
			//if exists,
			//call method of appropiate Reservation
			if(reservations.get(i).getReservationnumber().equals(reservationNo)) {
				price = reservations.get(i).calculateTotalPrice();
				exists = true;
			}	
		}
		//if reservation number doesnt exist, throw IllegalArgumentException and return null
		if(exists == false) {
			throw new IllegalArgumentException("Reservation number " + reservationNo + " does not exist.");
		}
		else
			return price;
				
	}

	public void updateAccount(Account account) {
		//set this account data equal to paramter data
		this.accountID = account.accountID;
		this.emailAddress = account.emailAddress;
		this.mailingAddress = account.mailingAddress;
		this.reservations = account.reservations;
	}

	//return account id for this Account
	public Integer getAccountid() {
		return accountID;
	}

	//sets emaill address for this account
	public void setEmailaddress(String address) {
		//validate input
		if(address == null)
			throw new IllegalArgumentException("email address may not be null");
		else
			emailAddress = address;		
	}

	//return this account's email address
	public String getEmailaddress() {
		return emailAddress;
	}

	//sets this account's mailing address
	public void setMailingAddress(Address mailing) {
		//validate input
		if(mailing == null)
			throw new IllegalArgumentException("mailing address may not be null");
		else
			mailingAddress = mailing;
	}

	//return this accounts mailing address
	public Address getMailingAddress() {
		return mailingAddress;
	}
	
	//returns the list of reservations associated with this account
	public Vector <Reservation> getReservations() {
		return reservations;
	}

}